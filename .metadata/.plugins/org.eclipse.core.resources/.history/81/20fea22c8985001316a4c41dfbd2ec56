import java.awt.Polygon;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;


public class GraphSpaceManager implements SearchSpaceManager {
	
	Set<SearchSpaceNode> search_space = new HashSet<SearchSpaceNode>();
	ArrayList<SearchSpaceNode> search_space_list = new ArrayList<SearchSpaceNode>();
	
	public GraphSpaceManager(SearchSpaceNode... search_space_list) {
		this.search_space_list = new ArrayList<SearchSpaceNode>(Arrays.asList(search_space_list));
		search_space = new HashSet<SearchSpaceNode>(this.search_space_list);
	}
	
	public ArrayList<SearchSpaceNode> getNeighborsForNode(SearchSpaceNode node,
			boolean cluster) {
		return search_space_list.get(search_space_list.indexOf(node)).getNeighbors();
	}

	public Set<SearchSpaceNode> getEntranceNodes() {
		return null;
	}

	public Set<SearchSpaceNode> getSearchSpace() {
		return search_space;
	}

	
	public Set<Polygon> getClusterBoundaries() {
		return null;
	}

	
	public int getClusterID(SearchSpaceNode node) {
		return 0;
	}
	
	public double getCost(SearchSpaceNode from, SearchSpaceNode to) {
		if(!from.getNeighbors().contains(to))
			throw new IllegalArgumentException("Not neighboring states.");
		return from.getCost(to);
	}

}
